# -*- coding: utf-8 -*-
"""PROJECT UAS (METODE KNN)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUKwGTma1tOGw2qRlVWDMMLoc9zdHRMY
"""

# Commented out IPython magic to ensure Python compatibility.
# load berbagai library yang diperlukan
import itertools
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter
import pandas as pd
import numpy as np
import matplotlib.ticker as ticker
from sklearn import preprocessing
# %matplotlib inline

# Kita akan unduh dari kumpulan dataset di laman github
!wget -O iris.csv https://raw.githubusercontent.com/achmatim/data-mining/main/Dataset/iris.csv

# Load Dataset
df = pd.read_csv('iris.csv')
df.head()

# menampilkan jumlah data per label
df['Label'].value_counts()

# menampilkan histogram dari data
df.hist(column='SepalLengthCm', bins=50)

# format dataset, yaitu bentuk feature sets (kumpulan atribut), kita bentuk variabel X
df.columns

# Untuk menggunakan library scikit-learn library, kita harus convert format data frame-nya Panda, ke array Numpy
X = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']] .values  #.astype(float)
X[0:5]

# Mendefinisikan Labelnya juga (Y)
y = df['Label'].values
y[0:5]

# normalisasi data agar perhitungan jarak menjadi lebih valid
X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))
X[0:5]

# Pembagian Data Training dan Testing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

# Import classifier K-Nearest Neighbors (KNN)
from sklearn.neighbors import KNeighborsClassifier

#Training
k = 4
#Train Model and Predict  
knn = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)
knn

# memprediksikan data
yhat = knn.predict(X_test)
yhat[0:5]

# Perhitungan Akurasi
from sklearn import metrics
print("Train set Accuracy: ", metrics.accuracy_score(y_train, knn.predict(X_train)))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, yhat))

# Performa dari model KNN sangat bergantung dengan nilai K, untuk melakukan pengujian nilai k dari k=1 s.d k=10
Ks = 10
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))
ConfustionMx = [];
for n in range(1,Ks):
    
    #Train Model and Predict  
    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)
    yhat=neigh.predict(X_test)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)

    
    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])

mean_acc

# menampilkan grafik / plot-nya
plt.plot(range(1,Ks),mean_acc,'g')
plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)
plt.legend(('Accuracy ', '+/- 3xstd'))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Nabors (K)')
plt.tight_layout()
plt.show()

# OUTPUT Akurasi terbaik 
print( "Akurasi terbaik adalah", mean_acc.max(), "dengan nilai k=", mean_acc.argmax()+1)